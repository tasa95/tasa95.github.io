version: "2.2"
services:
  frontend:
    image: narwhal-about-page
    container_name: narwhal-about-page
    hostname: narwhal-about-page
    ports:
      - 9080:80

  kong-migrations:
    image: gbtwhiaregistry.azurecr.io/narwhal/narwhal-api-gateway:develop
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_CUSTOM_PLUGINS: oidc
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: gbtwhiaregistry.azurecr.io/narwhal/narwhal-api-gateway:develop
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    deploy:
      restart_policy:
        condition: on-failure
  kong:
    image: gbtwhiaregistry.azurecr.io/narwhal/narwhal-api-gateway:develop
    user: "kong"
    container_name: "kong"
    entrypoint: "/docker-entrypoint.sh"
    command: kong docker-start
    depends_on:
      - db
    environment:
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:7001, 0.0.0.0:7444 ssl"
      KONG_PROXY_LISTEN: "0.0.0.0:80, 0.0.0.0:443 ssl"
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_SSL_PROTOCOLS: TLSv1.2 TLSv1.3
      KONG_NGINX_PROXY_LARGE_CLIENT_HEADER_BUFFERS: 16 128k
    ports:
      - "80:80/tcp"
      - "127.0.0.1:7001:7001/tcp"
      - "443:443/tcp"
      - "127.0.0.1:7444:7444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kong_data:/var/lib/postgresql/data

  pg_keycloak:
    image: postgres:9.5
    restart: always
    hostname: postgres
    container_name: pg_keycloak
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password

  keycloak:
    image: gbtwhiaregistry.azurecr.io/narwhal/narwhal-keycloak:develop
    restart: always
    container_name: keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      KEYCLOAK_FRONTEND_URL: https://localhost/keycloak/auth
      PROXY_ADDRESS_FORWARDING: "true"
    depends_on:
      - pg_keycloak
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/keycloak/auth/"]
      interval: 5s
      timeout: 2s
      retries: 15

  konga:
    image: pantsel/konga
    ports:
      - 1337:1337
    links:
      - kong:kong
    container_name: konga
    environment:
      - NODE_ENV=production

volumes:
  kong_data:
  postgres_data:
